{"version":3,"sources":["../src/to-dts.js"],"names":[],"mappings":"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","file":"to-dts.js","sourcesContent":["var indentation = '';\r\n\r\nfunction indent(callback) {\r\n\tvar old = indentation;\r\n\tindentation += '  ';\r\n\tvar result = callback();\r\n\tindentation = old;\r\n\treturn result;\r\n}\r\n\r\nfunction unique(value, index, self) { \r\n\treturn self.indexOf(value) === index;\r\n}\r\n\r\n// Processors for top-level definitons.\r\nvar topProcessors = {\r\n\tenum(name, {values}) {\r\n\t\t// TypeScript doesn't allow enums of literals, so we need to create type union instead.\r\n\t\treturn `type ${name} = ${values.map(value => typeof value).filter(unique).join(' | ')};`;\r\n\t},\r\n\r\n\tinterface(name, {base, props}) {\r\n\t\tvar result = `interface ${name} `;\r\n\t\tif (base.length) {\r\n\t\t\tresult += `extends ${base.join(', ')} `;\r\n\t\t}\r\n\t\tvar items = Object.create(null), hasItems = false;\r\n\t\tfor (let prop in props) {\r\n\t\t\t// Filter out useless \"type: string\" from desdendant types.\r\n\t\t\tif (name === 'Node' || prop !== 'type') {\r\n\t\t\t\titems[prop] = props[prop];\r\n\t\t\t\thasItems = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result + (hasItems ? typeProcessors.object({items}) : '{}');\r\n\t}\r\n};\r\n\r\n// Processors (code generators) for specific types.\r\nvar typeProcessors = {\r\n\tliteral: ({value}) => value === null ? 'any' : typeof value,\r\n\r\n\treference: ({name}) => name,\r\n\r\n\tarray: ({base}) => `Array<${processType(base)}>`,\r\n\r\n\tunion: ({types}) => (\r\n\t\ttypes.map(processType)\r\n\t\t.filter(unique)\r\n\t\t.filter(type => type !== 'any')\r\n\t\t.join(' | ')\r\n\t) || 'any',\r\n\r\n\tobject: ({items}) => {\r\n\t\tvar result = '{\\n';\r\n\t\tindent(() => {\r\n\t\t\tfor (let propName in items) {\r\n\t\t\t\tlet prop = items[propName];\r\n\t\t\t\tif (prop.kind === 'union' && prop.types.some(({kind, value}) => kind === 'literal' && value === null)) {\r\n\t\t\t\t\tpropName += '?';\r\n\t\t\t\t}\r\n\t\t\t\tresult += indentation + `${propName}: ${processType(prop)};\\n`;\r\n\t\t\t}\r\n\t\t});\r\n\t\tresult += indentation + '}';\r\n\t\treturn result;\r\n\t}\r\n};\r\n\r\nfunction processType(type) {\r\n\tvar processor = typeProcessors[type.kind];\r\n\tif (!processor) {\r\n\t\tthrow new ReferenceError(`Processor for ${type.kind} types doesn't exist.`);\r\n\t}\r\n\treturn processor(type);\r\n}\r\n\r\nexport default function toTypeScriptDef(spec) {\r\n\tvar result = [];\r\n\tindent(() => {\r\n\t\tfor (let name in spec) {\r\n\t\t\tlet def = spec[name];\r\n\t\t\tresult.push(indentation + topProcessors[def.kind](name, def));\r\n\t\t}\r\n\t});\r\n\treturn (\r\n`declare module ESTree {\r\n${result.join('\\n\\n')}\r\n}`\r\n\t);\r\n};"]}